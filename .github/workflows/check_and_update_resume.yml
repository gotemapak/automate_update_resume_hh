name: Check and Update HH Resume

on:
  schedule:
    - cron: "*/30 * * * *"  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–∂–¥—ã–µ 30 –º–∏–Ω—É—Ç
  workflow_dispatch:        # –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å —Ä—É—á–Ω–æ–≥–æ –∑–∞–ø—É—Å–∫–∞

jobs:
  check-and-update:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'
          
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install requests python-dotenv

      - name: Check last run and update if needed
        env:
          HH_CLIENT_ID: ${{ secrets.HH_CLIENT_ID }}
          HH_CLIENT_SECRET: ${{ secrets.HH_CLIENT_SECRET }}
          HH_REFRESH_TOKEN: ${{ secrets.HH_REFRESH_TOKEN }}
          HH_RESUME_IDS: ${{ secrets.HH_RESUME_IDS }}
          HH_ACCESS_TOKEN: ${{ secrets.HH_ACCESS_TOKEN }}
          TG_BOT_TOKEN: ${{ secrets.TG_BOT_TOKEN }}
          TG_CHAT_ID: ${{ secrets.TG_CHAT_ID }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          python -c "
          import requests
          import os
          import time
          from datetime import datetime, timedelta
          
          # –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ Telegram
          def send_telegram_message(text):
              token = os.environ.get('TG_BOT_TOKEN')
              chat_id = os.environ.get('TG_CHAT_ID')
              if not token or not chat_id:
                  print('‚ÑπÔ∏è Telegram –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –Ω–µ –∑–∞–¥–∞–Ω—ã ‚Äî –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É.')
                  return
              url = f'https://api.telegram.org/bot{token}/sendMessage'
              payload = {'chat_id': chat_id, 'text': text}
              try:
                  requests.post(url, data=payload)
              except Exception as e:
                  print(f'‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤ Telegram: {e}')
          
          # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö workflow runs
          token = os.environ.get('GITHUB_TOKEN')
          repo = os.environ.get('GITHUB_REPOSITORY')
          workflow_name = 'Update HH Resume'  # –ù–∞–∑–≤–∞–Ω–∏–µ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ workflow –¥–ª—è –ø–æ–∏—Å–∫–∞
          
          headers = {
              'Authorization': f'token {token}',
              'Accept': 'application/vnd.github.v3+json'
          }
          
          url = f'https://api.github.com/repos/{repo}/actions/workflows'
          response = requests.get(url, headers=headers)
          
          if response.status_code != 200:
              print(f'‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ workflows: {response.status_code}')
              print(response.text)
              exit(1)
              
          workflows = response.json().get('workflows', [])
          update_workflow_id = None
          
          for workflow in workflows:
              if workflow['name'] == workflow_name:
                  update_workflow_id = workflow['id']
                  break
          
          if not update_workflow_id:
              print(f'‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω workflow —Å –∏–º–µ–Ω–µ–º \"{workflow_name}\"')
              update_workflow_id = None  # –ë—É–¥–µ–º –∏—Å–∫–∞—Ç—å –ø–æ –ª—é–±–æ–º—É workflow —Å —É—Å–ø–µ—à–Ω—ã–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ–º
          
          # –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –∑–∞–ø—É—Å–∫–æ–≤
          url = f'https://api.github.com/repos/{repo}/actions/runs'
          params = {'per_page': 30}  # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 30 –∑–∞–ø—É—Å–∫–æ–≤
          if update_workflow_id:
              params['workflow_id'] = update_workflow_id
              
          response = requests.get(url, headers=headers, params=params)
          
          if response.status_code != 200:
              print(f'‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏—Å—Ç–æ—Ä–∏–∏ –∑–∞–ø—É—Å–∫–æ–≤: {response.status_code}')
              print(response.text)
              exit(1)
          
          # –ù–∞—Ö–æ–¥–∏–º –ø–æ—Å–ª–µ–¥–Ω–∏–π —É—Å–ø–µ—à–Ω—ã–π –∑–∞–ø—É—Å–∫
          runs = response.json().get('workflow_runs', [])
          successful_runs = [
              run for run in runs 
              if run['conclusion'] == 'success' and
              (update_workflow_id is None or run['workflow_id'] == update_workflow_id)
          ]
          
          min_interval = timedelta(hours=4, minutes=1)  # 4 —á–∞—Å–∞ –∏ 1 –º–∏–Ω—É—Ç–∞
          now = datetime.utcnow()
          
          if successful_runs:
              last_success = successful_runs[0]
              last_success_time = datetime.strptime(
                  last_success['updated_at'], '%Y-%m-%dT%H:%M:%SZ'
              )
              
              time_since_last = now - last_success_time
              
              if time_since_last < min_interval:
                  # –ï—â–µ –Ω–µ –ø—Ä–æ—à–ª–æ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –≤—Ä–µ–º–µ–Ω–∏
                  elapsed_minutes = time_since_last.total_seconds() / 60
                  remaining_minutes = (min_interval.total_seconds() / 60) - elapsed_minutes
                  
                  msg = f'‚è≥ –ü–æ—Å–ª–µ–¥–Ω–µ–µ —É—Å–ø–µ—à–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –±—ã–ª–æ {elapsed_minutes:.1f} –º–∏–Ω—É—Ç –Ω–∞–∑–∞–¥. '
                  msg += f'–ù—É–∂–Ω–æ –ø–æ–¥–æ–∂–¥–∞—Ç—å –µ—â–µ {remaining_minutes:.1f} –º–∏–Ω—É—Ç.'
                  
                  print(msg)
                  # –ù–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ Telegram –¥–ª—è —ç–∫–æ–Ω–æ–º–∏–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
                  exit(0)  # –í—ã—Ö–æ–¥–∏–º –±–µ–∑ –æ—à–∏–±–∫–∏, –Ω–æ –∏ –±–µ–∑ –∑–∞–ø—É—Å–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
          
          # –ï—Å–ª–∏ –¥–æ—à–ª–∏ —Å—é–¥–∞, –∑–Ω–∞—á–∏—Ç –ø—Ä–æ—à–ª–æ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –≤—Ä–µ–º–µ–Ω–∏ –∏–ª–∏ –Ω–µ—Ç —É—Å–ø–µ—à–Ω—ã—Ö –∑–∞–ø—É—Å–∫–æ–≤
          print('‚úÖ –ü—Ä–æ—à–ª–æ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –≤—Ä–µ–º–µ–Ω–∏ —Å –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —É—Å–ø–µ—à–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è')
          print('üöÄ –ó–∞–ø—É—Å–∫–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ä–µ–∑—é–º–µ...')
          
          # –ó–∞–ø—É—Å–∫–∞–µ–º workflow –≤—Ä—É—á–Ω—É—é —á–µ—Ä–µ–∑ API
          if update_workflow_id:
              dispatch_url = f'https://api.github.com/repos/{repo}/actions/workflows/{update_workflow_id}/dispatches'
              dispatch_data = {'ref': os.environ.get('GITHUB_REF', 'main')}
              
              response = requests.post(dispatch_url, headers=headers, json=dispatch_data)
              
              if response.status_code == 204:
                  msg = '‚úÖ –ó–∞–ø—É—â–µ–Ω –ø—Ä–æ—Ü–µ—Å—Å –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ä–µ–∑—é–º–µ'
                  print(msg)
                  send_telegram_message(msg)
              else:
                  msg = f'‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: {response.status_code} {response.text}'
                  print(msg)
                  send_telegram_message(msg)
                  exit(1)
          else:
              # –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ workflow –¥–ª—è –∑–∞–ø—É—Å–∫–∞, –∑–∞–ø—É—Å–∫–∞–µ–º —Å–∫—Ä–∏–ø—Ç –Ω–∞–ø—Ä—è–º—É—é
              import subprocess
              print('‚ö†Ô∏è –ù–µ –Ω–∞–π–¥–µ–Ω workflow –¥–ª—è –∑–∞–ø—É—Å–∫–∞, –≤—ã–ø–æ–ª–Ω—è–µ–º —Å–∫—Ä–∏–ø—Ç –Ω–∞–ø—Ä—è–º—É—é')
              
              try:
                  # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ —Å–∫—Ä–∏–ø—Ç–∞ –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º
                  subprocess.run(['pip', 'install', '-r', 'requirements.txt'], check=True)
                  
                  # –ó–∞–ø—É—Å–∫–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π —Å–∫—Ä–∏–ø—Ç
                  result = subprocess.run(['python', 'update_resume.py'], check=True)
                  msg = '‚úÖ –°–∫—Ä–∏–ø—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —É—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω'
                  print(msg)
                  # –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç —Å–∞–º —Å–∫—Ä–∏–ø—Ç update_resume.py
              except subprocess.CalledProcessError as e:
                  msg = f'‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ —Å–∫—Ä–∏–ø—Ç–∞: {str(e)}'
                  print(msg)
                  send_telegram_message(msg)
                  exit(1)
          "