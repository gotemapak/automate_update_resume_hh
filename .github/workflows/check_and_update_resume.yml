name: Check and Update HH Resume

on:
  schedule:
    - cron: "*/30 * * * *"  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–∂–¥—ã–µ 30 –º–∏–Ω—É—Ç
  workflow_dispatch:        # –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å —Ä—É—á–Ω–æ–≥–æ –∑–∞–ø—É—Å–∫–∞

jobs:
  check-and-update:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.12'
          
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install requests==2.32.2 python-dotenv==1.0.0

      - name: Check last run and update if needed
        env:
          HH_CLIENT_ID: ${{ secrets.HH_CLIENT_ID }}
          HH_CLIENT_SECRET: ${{ secrets.HH_CLIENT_SECRET }}
          HH_REFRESH_TOKEN: ${{ secrets.HH_REFRESH_TOKEN }}
          HH_RESUME_IDS: ${{ secrets.HH_RESUME_IDS }}
          HH_ACCESS_TOKEN: ${{ secrets.HH_ACCESS_TOKEN }}
          TG_BOT_TOKEN: ${{ secrets.TG_BOT_TOKEN }}
          TG_CHAT_ID: ${{ secrets.TG_CHAT_ID }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          python -c "
          import requests
          import os
          import time
          from datetime import datetime, timedelta, timezone
          
          def send_telegram_message(text):
              token = os.environ.get('TG_BOT_TOKEN')
              chat_id = os.environ.get('TG_CHAT_ID')
              if not token or not chat_id:
                  return
              url = f'https://api.telegram.org/bot{token}/sendMessage'
              payload = {
                  'chat_id': chat_id, 
                  'text': text,
                  'parse_mode': 'HTML'
              }
              try:
                  requests.post(url, data=payload)
              except Exception:
                  pass
          
          token = os.environ.get('GITHUB_TOKEN')
          repo = os.environ.get('GITHUB_REPOSITORY')
          
          headers = {
              'Authorization': f'token {token}',
              'Accept': 'application/vnd.github.v3+json'
          }
          
          url = f'https://api.github.com/repos/{repo}/actions/runs'
          params = {'per_page': 30}
              
          response = requests.get(url, headers=headers, params=params)
          
          if response.status_code != 200:
              exit(1)
          
          runs = response.json().get('workflow_runs', [])
          successful_runs = [
              run for run in runs 
              if run['conclusion'] == 'success'
          ]
          
          min_interval = timedelta(hours=4, minutes=1)
          now = datetime.now(timezone.utc)
          
          if successful_runs:
              last_success = successful_runs[0]
              last_success_time = datetime.strptime(
                  last_success['updated_at'], 
                  '%Y-%m-%dT%H:%M:%SZ'
              ).replace(tzinfo=timezone.utc)
              
              time_since_last = now - last_success_time
              
              if time_since_last < min_interval:
                  exit(0)
          
          # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
          required_vars = ['HH_CLIENT_ID', 'HH_CLIENT_SECRET', 'HH_REFRESH_TOKEN', 'HH_RESUME_IDS']
          missing_vars = [var for var in required_vars if not os.environ.get(var)]
          if missing_vars:
              missing_vars_str = ", ".join(missing_vars)
              print("Missing required environment variables: " + missing_vars_str)
              send_telegram_message("‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è: " + missing_vars_str)
              exit(1)
          
          send_telegram_message('üöÄ <b>–ó–∞–ø—É—Å–∫ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ä–µ–∑—é–º–µ</b>')
          
          import subprocess
          try:
              result = subprocess.run(
                  ['python', 'update_resume.py'],
                  check=True,
                  capture_output=True,
                  text=True
              )
              # –õ–æ–≥–∏—Ä—É–µ–º –≤—ã–≤–æ–¥ —Å–∫—Ä–∏–ø—Ç–∞
              if result.stdout:
                  print(result.stdout)
              if result.stderr:
                  print(result.stderr)
          except subprocess.CalledProcessError as e:
              print(f'Script error: {str(e)}')
              print('Script output:')
              print(e.stdout)
              print('Script errors:')
              print(e.stderr)
              send_telegram_message(f'‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ —Å–∫—Ä–∏–ø—Ç–∞: {str(e)}')
              exit(1)
          "