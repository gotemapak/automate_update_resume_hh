import requests
import os
from dotenv import load_dotenv

load_dotenv()

def send_telegram_message(text):
    token = os.getenv("TG_BOT_TOKEN")
    chat_id = os.getenv("TG_CHAT_ID")
    if not token or not chat_id:
        print("‚ÑπÔ∏è Telegram –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –Ω–µ –∑–∞–¥–∞–Ω—ã ‚Äî –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É.")
        return
    url = f"https://api.telegram.org/bot{token}/sendMessage"
    payload = {"chat_id": chat_id, "text": text}
    try:
        requests.post(url, data=payload)
    except Exception as e:
        print("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤ Telegram:", e)

def get_tokens_if_needed():
    if not os.getenv("HH_AUTH_CODE"):
        return
    print("üì• –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω—ã –ø–æ HH_AUTH_CODE...")
    url = "https://hh.ru/oauth/token"
    data = {
        "grant_type": "authorization_code",
        "client_id": os.getenv("HH_CLIENT_ID"),
        "client_secret": os.getenv("HH_CLIENT_SECRET"),
        "code": os.getenv("HH_AUTH_CODE")
    }
    response = requests.post(url, data=data)
    if response.ok:
        tokens = response.json()
        print("‚úÖ Access token:", tokens["access_token"])
        print("üîÅ Refresh token:", tokens["refresh_token"])
        send_telegram_message("‚úÖ –ü–æ–ª—É—á–µ–Ω—ã –Ω–æ–≤—ã–µ —Ç–æ–∫–µ–Ω—ã (access + refresh).")
    else:
        print("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ç–æ–∫–µ–Ω–æ–≤:")
        print(response.status_code, response.text)
        send_telegram_message(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ç–æ–∫–µ–Ω–æ–≤: {response.text}")

def list_resumes_if_token():
    access_token = os.getenv("HH_ACCESS_TOKEN")
    if not access_token:
        return
    print("üìÑ –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ä–µ–∑—é–º–µ...")
    headers = {"Authorization": f"Bearer {access_token}"}
    response = requests.get("https://api.hh.ru/resumes/mine", headers=headers)
    if response.ok:
        data = response.json()
        print("üßæ –ù–∞–π–¥–µ–Ω–æ —Ä–µ–∑—é–º–µ:")
        for i, resume in enumerate(data.get("items", []), start=1):
            print(f"{i}. {resume['title']} ‚Äî ID: {resume['id']}")
    else:
        print("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ —Ä–µ–∑—é–º–µ:")
        print(response.status_code, response.text)

def get_access_token():
    print("üîÅ –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å access_token —á–µ—Ä–µ–∑ refresh_token...")
    url = "https://hh.ru/oauth/token"
    data = {
        "grant_type": "refresh_token",
        "refresh_token": os.getenv("HH_REFRESH_TOKEN"),
        "client_id": os.getenv("HH_CLIENT_ID"),
        "client_secret": os.getenv("HH_CLIENT_SECRET")
    }
    response = requests.post(url, data=data)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –æ—à–∏–±–∫—É "token not expired"
    if not response.ok:
        try:
            error_data = response.json()
            if error_data.get("error") == "invalid_grant" and "not expired" in error_data.get("error_description", ""):
                print("‚ÑπÔ∏è API —Å–æ–æ–±—â–∞–µ—Ç, —á—Ç–æ —Ç–µ–∫—É—â–∏–π —Ç–æ–∫–µ–Ω –µ—â—ë –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω - –∏—Å–ø–æ–ª—å–∑—É–µ–º HH_ACCESS_TOKEN")
                access_token = os.getenv("HH_ACCESS_TOKEN")
                if access_token:
                    return access_token
                else:
                    print("‚ö†Ô∏è HH_ACCESS_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")
        except:
            pass
            
        print("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å access_token —á–µ—Ä–µ–∑ refresh_token")
        print("–°—Ç–∞—Ç—É—Å:", response.status_code)
        print("–û—Ç–≤–µ—Ç:", response.text)
        raise Exception("Access token refresh failed.")
    
    return response.json()["access_token"]

def update_resume(token, resume_id):
    url = f"https://api.hh.ru/resumes/{resume_id}/publish"
    headers = {"Authorization": f"Bearer {token}"}
    response = requests.post(url, headers=headers)
    if response.status_code == 204:
        msg = f"‚úÖ –†–µ–∑—é–º–µ {resume_id} –æ–±–Ω–æ–≤–ª–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ."
        print(msg)
        send_telegram_message(msg)
    else:
        msg = f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ä–µ–∑—é–º–µ {resume_id}: {response.status_code} {response.text}"
        print(msg)
        send_telegram_message(msg)

def update_resumes_if_possible():
    try:
        access_token = get_access_token()
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ access_token: {str(e)}")
        access_token = os.getenv("HH_ACCESS_TOKEN")
        if not access_token:
            error_msg = "‚ùå –ù–µ—Ç access_token –∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –µ–≥–æ —á–µ—Ä–µ–∑ refresh_token."
            print(error_msg)
            send_telegram_message(error_msg)
            return
        else:
            print("üîë –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ä–µ–∑–µ—Ä–≤–Ω—ã–π HH_ACCESS_TOKEN –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")
    
    resume_ids = os.getenv("HH_RESUME_IDS")
    if not resume_ids:
        print("‚ùå –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è HH_RESUME_IDS –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
        send_telegram_message("‚ùå –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è HH_RESUME_IDS –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
        return
    for rid in resume_ids.split(","):
        rid = rid.strip()
        if rid:
            update_resume(access_token, rid)

if __name__ == "__main__":
    print("üöÄ –ó–∞–ø—É—Å–∫ all-in-one resume bot")
    get_tokens_if_needed()
    list_resumes_if_token()
    update_resumes_if_possible()
